I"0=<h2 id="추석-트래픽">추석 트래픽</h2>

<ul>
  <li>
    <p>문제</p>

    <ul>
      <li>이번 추석에도 시스템 장애가 없는 명절을 보내고 싶은 어피치는 서버를 증설해야 할지 고민이다. 장애 대비용 서버 증설 여부를 결정하기 위해 작년 추석 기간인 9월 15일 로그 데이터를 분석한 후 초당 최대 처리량을 계산해보기로 했다. 초당 최대 처리량은 요청의 응답 완료 여부에 관계없이 임의 시간부터 1초(=1,000밀리초)간 처리하는 요청의 최대 개수를 의미한다.</li>
    </ul>
  </li>
  <li>
    <p>입력 형식</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">solution</code> 함수에 전달되는 <code class="language-plaintext highlighter-rouge">lines</code> 배열은 N(1 ≦ N ≦ 2,000)개의 로그 문자열로 되어 있으며, 각 로그 문자열마다 요청에 대한 응답완료시간 S와 처리시간 T가 공백으로 구분되어 있다.</p>
      </li>
      <li>
        <p>응답완료시간 <strong>S</strong>는 작년 추석인 2016년 9월 15일만 포함하여 고정 길이 <code class="language-plaintext highlighter-rouge">2016-09-15 hh:mm:ss.sss</code> 형식으로 되어 있다.</p>
      </li>
      <li>
        <p>처리시간 T는 <code class="language-plaintext highlighter-rouge">0.1s</code>, <code class="language-plaintext highlighter-rouge">0.312s</code>, <code class="language-plaintext highlighter-rouge">2s</code> 와 같이 최대 소수점 셋째 자리까지 기록하며 뒤에는 초 단위를 의미하는 <code class="language-plaintext highlighter-rouge">s</code>로 끝난다.</p>
      </li>
      <li>
        <p>예를 들어, 로그 문자열 <code class="language-plaintext highlighter-rouge">2016-09-15 03:10:33.020 0.011s</code>은 2016년 9월 15일 오전 3시 10분 <strong>33.010초</strong>부터 2016년 9월 15일 오전 3시 10분 <strong>33.020초</strong>까지 <strong>0.011초</strong> 동안 처리된 요청을 의미한다. (처리시간은 시작시간과 끝시간을 포함)</p>
      </li>
      <li>
        <p>서버에는 타임아웃이 3초로 적용되어 있기 때문에 처리시간은 <strong>0.001 ≦ T ≦ 3.000이다.</strong></p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">lines</code> 배열은 응답완료시간 S를 기준으로 오름차순 정렬되어 있다.</p>
      </li>
    </ul>
  </li>
  <li>
    <p>출력 형식</p>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">solution</code> 함수에서는 로그 데이터 <code class="language-plaintext highlighter-rouge">lines</code> 배열에 대해 <strong>초당 최대 처리량</strong>을 리턴한다.</li>
    </ul>
  </li>
  <li>
    <p>입출력 예제</p>

    <ul>
      <li>
        <p>예제 1</p>

        <ul>
          <li>
            <p>입력: [<br />
2016-09-15 01:00:04.001 2.0s,<br />
2016-09-15 01:00:07.000 2s<br />]</p>
          </li>
          <li>
            <p>출력: 1</p>
          </li>
        </ul>
      </li>
      <li>
        <p>예제2</p>

        <ul>
          <li>
            <p>입력: [<br />2016-09-15 01:00:04.002 2.0s<br />,
2016-09-15 01:00:07.000 2s<br />]</p>
          </li>
          <li>
            <p>출력: 2</p>
          </li>
          <li>
            <p>설명: 처리시간은 시작시간과 끝시간을 포함하므로 첫 번째 로그는 <code class="language-plaintext highlighter-rouge">01:00:02.003 ~ 01:00:04.002</code>에서 2초 동안 처리되었으며, 두 번째 로그는 <code class="language-plaintext highlighter-rouge">01:00:05.001 ~ 01:00:07.000</code>에서 2초 동안 처리된다. 따라서, 첫 번째 로그가 끝나는 시점과 두 번째 로그가 시작하는 시점의 구간인 <code class="language-plaintext highlighter-rouge">01:00:04.002 ~ 01:00:05.001</code> 1초 동안 최대 2개가 된다.</p>
          </li>
        </ul>
      </li>
      <li>
        <p>예제3</p>

        <ul>
          <li>
            <p>입력: [<br />
2016-09-15 20:59:57.421 0.351s,<br />
2016-09-15 20:59:58.233 1.181s,<br />
2016-09-15 20:59:58.299 0.8s,<br />
2016-09-15 20:59:58.688 1.041s,<br />
2016-09-15 20:59:59.591 1.412s,<br />
2016-09-15 21:00:00.464 1.466s,<br />
2016-09-15 21:00:00.741 1.581s,<br />
2016-09-15 21:00:00.748 2.31s,<br />
2016-09-15 21:00:00.966 0.381s,<br />
2016-09-15 21:00:02.066 2.62s<br />
]</p>
          </li>
          <li>
            <p>출력: 7</p>
          </li>
          <li>
            <p>설명: 아래 타임라인 그림에서 빨간색으로 표시된 1초 각 구간의 처리량을 구해보면 <code class="language-plaintext highlighter-rouge">(1)</code>은 4개, <code class="language-plaintext highlighter-rouge">(2)</code>는 7개, <code class="language-plaintext highlighter-rouge">(3)</code>는 2개임을 알 수 있다. 따라서 초당 최대 처리량은 7이 되며, 동일한 최대 처리량을 갖는 1초 구간은 여러 개 존재할 수 있으므로 이 문제에서는 구간이 아닌 개수만 출력한다.<br />
<img src="https://user-images.githubusercontent.com/37994634/104436182-a1bcde00-55d0-11eb-8c43-c2578688536c.png" alt="image" /></p>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="풀이">풀이</h2>

<ul>
  <li>
    <p>접근 방법</p>

    <ul>
      <li>결국 초당 몇 개의 작업을 수행하는 지에 대한 count 중 최댓값을 구하는 것</li>
      <li>초당 작업의 수행 수가 변화는 시점에대한 비교를 <code class="language-plaintext highlighter-rouge">작업이 끝날 때</code> 해주면 된다.</li>
    </ul>

    <ol>
      <li>우선 로그에서 날짜 부분을 떼어내고, 끝나는 시간과 작업시간으로 시작시간을 계산한다.</li>
      <li>
        <p>계산 이후 시간을 동일시한다. <code class="language-plaintext highlighter-rouge">ms</code> 단위로 동일하게 바꾸어주었다.</p>

        <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 1,2의 접근방법에 대한 부분코드
</span><span class="n">time_list</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
<span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">:</span>
    <span class="n">end_time_split</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">' '</span><span class="p">)[</span><span class="mi">1</span><span class="p">].</span><span class="n">split</span><span class="p">(</span><span class="s">':'</span><span class="p">)</span>
    <span class="n">end_time_to_mil</span> <span class="o">=</span> <span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">end_time_split</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">*</span> <span class="mi">3600</span> <span class="o">+</span> <span class="nb">int</span><span class="p">(</span><span class="n">end_time_split</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">+</span> <span class="nb">float</span><span class="p">(</span><span class="n">end_time_split</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span> <span class="o">*</span> <span class="mi">1000</span>
    <span class="n">start_time_to_mil</span> <span class="o">=</span> <span class="n">end_time_to_mil</span> <span class="o">-</span> <span class="nb">float</span><span class="p">(</span><span class="n">line</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">' '</span><span class="p">)[</span><span class="mi">2</span><span class="p">][:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span><span class="o">*</span><span class="mi">1000</span>
    <span class="n">time_list</span><span class="p">.</span><span class="n">append</span><span class="p">([</span><span class="n">start_time_to_mil</span><span class="p">,</span><span class="n">end_time_to_mil</span><span class="p">])</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>이후 시간순으로 정렬을 한다</p>

        <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">time_list</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">time_list</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span> <span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>끝나는 시간에 999ms를 더한다(끝난 시점부터 999ms초 까지는 그 구간에서 유효한 동시작업이라고 인정되기 때문). 이후 끝나는 시간과 999ms를 더한 시간 구간에 대해서 time_list를 비교하여 work_count를 센 후 max count를 반환한다.</p>

        <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">time</span> <span class="ow">in</span> <span class="n">time_list</span><span class="p">:</span>
    <span class="n">start</span><span class="p">,</span> <span class="n">end</span> <span class="o">=</span><span class="n">time</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">time</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">999</span>
    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">time_list</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">end</span> <span class="ow">and</span> <span class="n">t</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">start</span><span class="p">:</span>
            <span class="n">work_count</span><span class="o">+=</span><span class="mi">1</span>
    <span class="n">answer</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">work_count</span><span class="p">)</span>
    <span class="n">work_count</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">return</span> <span class="nb">max</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>
</code></pre></div>        </div>
      </li>
    </ol>
  </li>
  <li>
    <p>전체 코드</p>

    <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">solution</span><span class="p">(</span><span class="n">lines</span><span class="p">):</span>
<span class="n">answer</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">time_list</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
<span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">:</span>
    <span class="n">end_time_split</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">' '</span><span class="p">)[</span><span class="mi">1</span><span class="p">].</span><span class="n">split</span><span class="p">(</span><span class="s">':'</span><span class="p">)</span>
    <span class="n">end_time_to_mil</span> <span class="o">=</span> <span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">end_time_split</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">*</span> <span class="mi">3600</span> <span class="o">+</span> <span class="nb">int</span><span class="p">(</span><span class="n">end_time_split</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">+</span> <span class="nb">float</span><span class="p">(</span><span class="n">end_time_split</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span> <span class="o">*</span> <span class="mi">1000</span>
    <span class="n">start_time_to_mil</span> <span class="o">=</span> <span class="n">end_time_to_mil</span> <span class="o">-</span> <span class="nb">float</span><span class="p">(</span><span class="n">line</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">' '</span><span class="p">)[</span><span class="mi">2</span><span class="p">][:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span><span class="o">*</span><span class="mi">1000</span>
    <span class="n">time_list</span><span class="p">.</span><span class="n">append</span><span class="p">([</span><span class="n">start_time_to_mil</span><span class="p">,</span><span class="n">end_time_to_mil</span><span class="p">])</span>

<span class="n">time_list</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">time_list</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span> <span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="n">work_count</span><span class="o">=</span><span class="mi">0</span>
<span class="k">for</span> <span class="n">time</span> <span class="ow">in</span> <span class="n">time_list</span><span class="p">:</span>
    <span class="n">start</span><span class="p">,</span> <span class="n">end</span> <span class="o">=</span><span class="n">time</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">time</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">999</span>
    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">time_list</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">end</span> <span class="ow">and</span> <span class="n">t</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">start</span><span class="p">:</span>
            <span class="n">work_count</span><span class="o">+=</span><span class="mi">1</span>
    <span class="n">answer</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">work_count</span><span class="p">)</span>
    <span class="n">work_count</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">return</span> <span class="nb">max</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
</ul>
:ET