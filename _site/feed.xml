<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://closetotheworld.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://closetotheworld.github.io/" rel="alternate" type="text/html" /><updated>2021-01-14T01:22:03+09:00</updated><id>https://closetotheworld.github.io/feed.xml</id><title type="html">closetotheworld’s devlog</title><subtitle>I want close to the world on tech :)</subtitle><author><name>Wonryang Heo</name></author><entry><title type="html">Programmers level-3 (kakao 2018 추석트래픽)</title><link href="https://closetotheworld.github.io/programmers/programmers-kakao-2018-thanksgiving/" rel="alternate" type="text/html" title="Programmers level-3 (kakao 2018 추석트래픽)" /><published>2021-01-13T00:00:00+09:00</published><updated>2021-01-14T03:40:00+09:00</updated><id>https://closetotheworld.github.io/programmers/programmers-kakao-2018-thanksgiving</id><content type="html" xml:base="https://closetotheworld.github.io/programmers/programmers-kakao-2018-thanksgiving/">&lt;h2 id=&quot;추석-트래픽&quot;&gt;추석 트래픽&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;문제&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;이번 추석에도 시스템 장애가 없는 명절을 보내고 싶은 어피치는 서버를 증설해야 할지 고민이다. 장애 대비용 서버 증설 여부를 결정하기 위해 작년 추석 기간인 9월 15일 로그 데이터를 분석한 후 초당 최대 처리량을 계산해보기로 했다. 초당 최대 처리량은 요청의 응답 완료 여부에 관계없이 임의 시간부터 1초(=1,000밀리초)간 처리하는 요청의 최대 개수를 의미한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;입력 형식&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;solution&lt;/code&gt; 함수에 전달되는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lines&lt;/code&gt; 배열은 N(1 ≦ N ≦ 2,000)개의 로그 문자열로 되어 있으며, 각 로그 문자열마다 요청에 대한 응답완료시간 S와 처리시간 T가 공백으로 구분되어 있다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;응답완료시간 &lt;strong&gt;S&lt;/strong&gt;는 작년 추석인 2016년 9월 15일만 포함하여 고정 길이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2016-09-15 hh:mm:ss.sss&lt;/code&gt; 형식으로 되어 있다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;처리시간 T는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0.1s&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0.312s&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2s&lt;/code&gt; 와 같이 최대 소수점 셋째 자리까지 기록하며 뒤에는 초 단위를 의미하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt;로 끝난다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;예를 들어, 로그 문자열 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2016-09-15 03:10:33.020 0.011s&lt;/code&gt;은 2016년 9월 15일 오전 3시 10분 &lt;strong&gt;33.010초&lt;/strong&gt;부터 2016년 9월 15일 오전 3시 10분 &lt;strong&gt;33.020초&lt;/strong&gt;까지 &lt;strong&gt;0.011초&lt;/strong&gt; 동안 처리된 요청을 의미한다. (처리시간은 시작시간과 끝시간을 포함)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;서버에는 타임아웃이 3초로 적용되어 있기 때문에 처리시간은 &lt;strong&gt;0.001 ≦ T ≦ 3.000이다.&lt;/strong&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lines&lt;/code&gt; 배열은 응답완료시간 S를 기준으로 오름차순 정렬되어 있다.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;출력 형식&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;solution&lt;/code&gt; 함수에서는 로그 데이터 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lines&lt;/code&gt; 배열에 대해 &lt;strong&gt;초당 최대 처리량&lt;/strong&gt;을 리턴한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;입출력 예제&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;예제 1&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;입력: [&lt;br /&gt;
2016-09-15 01:00:04.001 2.0s,&lt;br /&gt;
2016-09-15 01:00:07.000 2s&lt;br /&gt;]&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;출력: 1&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;예제2&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;입력: [&lt;br /&gt;2016-09-15 01:00:04.002 2.0s&lt;br /&gt;,
2016-09-15 01:00:07.000 2s&lt;br /&gt;]&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;출력: 2&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;설명: 처리시간은 시작시간과 끝시간을 포함하므로 첫 번째 로그는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;01:00:02.003 ~ 01:00:04.002&lt;/code&gt;에서 2초 동안 처리되었으며, 두 번째 로그는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;01:00:05.001 ~ 01:00:07.000&lt;/code&gt;에서 2초 동안 처리된다. 따라서, 첫 번째 로그가 끝나는 시점과 두 번째 로그가 시작하는 시점의 구간인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;01:00:04.002 ~ 01:00:05.001&lt;/code&gt; 1초 동안 최대 2개가 된다.&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;예제3&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;입력: [&lt;br /&gt;
2016-09-15 20:59:57.421 0.351s,&lt;br /&gt;
2016-09-15 20:59:58.233 1.181s,&lt;br /&gt;
2016-09-15 20:59:58.299 0.8s,&lt;br /&gt;
2016-09-15 20:59:58.688 1.041s,&lt;br /&gt;
2016-09-15 20:59:59.591 1.412s,&lt;br /&gt;
2016-09-15 21:00:00.464 1.466s,&lt;br /&gt;
2016-09-15 21:00:00.741 1.581s,&lt;br /&gt;
2016-09-15 21:00:00.748 2.31s,&lt;br /&gt;
2016-09-15 21:00:00.966 0.381s,&lt;br /&gt;
2016-09-15 21:00:02.066 2.62s&lt;br /&gt;
]&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;출력: 7&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;설명: 아래 타임라인 그림에서 빨간색으로 표시된 1초 각 구간의 처리량을 구해보면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(1)&lt;/code&gt;은 4개, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(2)&lt;/code&gt;는 7개, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(3)&lt;/code&gt;는 2개임을 알 수 있다. 따라서 초당 최대 처리량은 7이 되며, 동일한 최대 처리량을 갖는 1초 구간은 여러 개 존재할 수 있으므로 이 문제에서는 구간이 아닌 개수만 출력한다.&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/37994634/104436182-a1bcde00-55d0-11eb-8c43-c2578688536c.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;풀이&quot;&gt;풀이&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;접근 방법&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;결국 초당 몇 개의 작업을 수행하는 지에 대한 count 중 최댓값을 구하는 것&lt;/li&gt;
      &lt;li&gt;초당 작업의 수행 수가 변화는 시점에대한 비교를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;작업이 끝날 때&lt;/code&gt; 해주면 된다.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;ol&gt;
      &lt;li&gt;우선 로그에서 날짜 부분을 떼어내고, 끝나는 시간과 작업시간으로 시작시간을 계산한다.&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;계산 이후 시간을 동일시한다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ms&lt;/code&gt; 단위로 동일하게 바꾸어주었다.&lt;/p&gt;

        &lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# 1,2의 접근방법에 대한 부분코드
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;end_time_split&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;':'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;end_time_to_mil&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end_time_split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3600&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end_time_split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end_time_split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;start_time_to_mil&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end_time_to_mil&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;time_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_time_to_mil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end_time_to_mil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;이후 시간순으로 정렬을 한다&lt;/p&gt;

        &lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;time_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;끝나는 시간에 999ms를 더한다(끝난 시점부터 999ms초 까지는 그 구간에서 유효한 동시작업이라고 인정되기 때문). &lt;br /&gt;이후 끝나는 시간과 999ms를 더한 시간 구간에 대해서 time_list를 비교하여 work_count를 센 후 max count를 반환한다.&lt;/p&gt;

        &lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;work_count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;999&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;work_count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;work_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;work_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;전체 코드&lt;/p&gt;

    &lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;time_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;end_time_split&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;':'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;end_time_to_mil&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end_time_split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3600&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end_time_split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end_time_split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;start_time_to_mil&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end_time_to_mil&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;time_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_time_to_mil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end_time_to_mil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;time_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;work_count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;999&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;work_count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;work_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;work_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Wonryang Heo</name></author><category term="Programmers" /><category term="algorithm" /><summary type="html">추석 트래픽</summary></entry><entry><title type="html">D O C K E R ?</title><link href="https://closetotheworld.github.io/docker/docker-start/" rel="alternate" type="text/html" title="D O C K E R ?" /><published>2021-01-13T00:00:00+09:00</published><updated>2021-01-13T07:25:00+09:00</updated><id>https://closetotheworld.github.io/docker/docker-start</id><content type="html" xml:base="https://closetotheworld.github.io/docker/docker-start/">&lt;h2 id=&quot;도커&quot;&gt;도커?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;컨테이너 안에 있는 애플리케이션 배포를 자동화하는 오픈소스 엔진&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;가상화된 컨테이너 실행 환경 위에 애플리케이션 배포엔진을 추가한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;도커의 목적
    &lt;ul&gt;
      &lt;li&gt;도커는 빠르다.
        &lt;ul&gt;
          &lt;li&gt;몇 분 만에 애플리케이션을 도커화 할 수 있음&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;의무의 논리적 분리
        &lt;ul&gt;
          &lt;li&gt;컨테이너 내부에서 동작하는 애플리케이션만 집중할 수 있음.&lt;/li&gt;
          &lt;li&gt;개발자가 코드를 작성할 때의 환경과 배포 실행 환경을 보장하여 일관성을 향상시킨다.
            &lt;ul&gt;
              &lt;li&gt;ex: “개발할 땐 잘됐는데 배포때 안돼!!” 를 방지!&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;빠르고 효율적 개발사이클
        &lt;ul&gt;
          &lt;li&gt;도커의 사용목적은 코드작성, 테스트, 배포까지의 시간을 줄이는 데에 있기 때문이다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;도커-컴포넌트&quot;&gt;도커 컴포넌트&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;도커 클라이언트와 서버
    &lt;ul&gt;
      &lt;li&gt;도커는 클라이언트 - 서버 애플리케이션이다.&lt;/li&gt;
      &lt;li&gt;docker과 api로 이루어 져 있는데, 클라이언트에서 api를 통해 서버에 명령을 전달한다.&lt;/li&gt;
      &lt;li&gt;마치 직접 명령하는 것 처럼 보인다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;도커 이미지&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;이미지에서 컨테이너를 만드는데, 이는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;빌드&lt;/code&gt; 에 해당한다.&lt;/li&gt;
      &lt;li&gt;여러 레이어가 나뉜 형태이며 유니온 파일 시스템을 사용함.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;도커 레지스트리&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;도커는 커스텀 이미지를 레지스트리에 저장한다.
        &lt;ul&gt;
          &lt;li&gt;public registry : 도커 허브&lt;/li&gt;
          &lt;li&gt;private registry : 나중에 알아보자..&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;컨테이너
    &lt;ul&gt;
      &lt;li&gt;이미지에서 실행이 되는 단위&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;도커-설치&quot;&gt;도커 설치&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;정식 릴리즈 된 도커의 최신 버전을 다운받는다!&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; https://get.docker.com | &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;도커는 기본적으로 root 권한이 필요합니다! 사용하는 사용자를 docker 그룹에 추가해줍시다!
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;usermod &lt;span class=&quot;nt&quot;&gt;-aG&lt;/span&gt; docker &lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 현재 접속 중인 사용자에게 원한을 준다&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;usermod &lt;span class=&quot;nt&quot;&gt;-aG&lt;/span&gt; docker user &lt;span class=&quot;c&quot;&gt;# user 사용자에게 권한주기&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;서비스가 끝나면 정상설치가 되었는지 확인 해 봅니다.
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;도커의-기본-명령어들&quot;&gt;도커의 기본 명령어들&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;도커를 실행하는 명령어는 다음과 같습니다.&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;OPTIONS] IMAGE[:TAG|@DIGEST] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;COMMAND] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ARG...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;다음은 run 시에 자주 사용하는 옵션입니다.&lt;/p&gt;

        &lt;table&gt;
          &lt;thead&gt;
            &lt;tr&gt;
              &lt;th style=&quot;text-align: center&quot;&gt;옵션&lt;/th&gt;
              &lt;th style=&quot;text-align: center&quot;&gt;설명&lt;/th&gt;
            &lt;/tr&gt;
          &lt;/thead&gt;
          &lt;tbody&gt;
            &lt;tr&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;-d&lt;/td&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;detached mode. 백그라운드모드를 의미&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;-p&lt;/td&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;호스트와 컨테이너의 포트를 연결(포워딩)&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;-v&lt;/td&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;호스트와 컨테이너의 디렉토리를 연결(마운트)(볼륨)&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;-e&lt;/td&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;컨테이너 내에서 사용할 환경변수를 설정함.&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;-name&lt;/td&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;컨테이너의 이름을 설정&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;-rm&lt;/td&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;컨테이너의 프로세스가 종료될 시 자동제거&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;-it&lt;/td&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;터미널 키보드 system.in 옵션&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;-link&lt;/td&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;컨테이너를 연결한다 ([컨테이너명:별칭])&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/tbody&gt;
        &lt;/table&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Wonryang Heo</name></author><category term="Docker" /><category term="container" /><category term="MSA" /><summary type="html">도커?</summary></entry><entry><title type="html">CentOS 7 user 생성과 sudoer</title><link href="https://closetotheworld.github.io/linux/centos-user-config/" rel="alternate" type="text/html" title="CentOS 7 user 생성과 sudoer" /><published>2021-01-12T00:00:00+09:00</published><updated>2021-01-13T04:50:00+09:00</updated><id>https://closetotheworld.github.io/linux/centos-user-config</id><content type="html" xml:base="https://closetotheworld.github.io/linux/centos-user-config/">&lt;h3 id=&quot;wheel과-sudoer&quot;&gt;wheel과 sudoer&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;보통 centOS를 설치하면 초기 아이디는 root로 하여 패스워드를 설정하게 된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;sudo / wheel 그룹은 sudoers 파일에 정의 된 내용을 기반으로 하는 권한을 갖는다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;step-1---사용자-생성--비밀번호-설정--sudo권한-주기&quot;&gt;STEP 1 - 사용자 생성 &amp;amp; 비밀번호 설정 &amp;amp; sudo권한 주기&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;우선 사용자를 생성한다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;u&gt;closetotheworld&lt;/u&gt; 를 사용하고싶은 이름으로 바꾸어서 실행.&lt;/p&gt;

        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;adduser closetotheworld
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;비밀번호를 설정한다&lt;/p&gt;
        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;passwd closetotheworld
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;wheel그룹 추가&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;usermod &lt;span class=&quot;nt&quot;&gt;-aG&lt;/span&gt; wheel closetotheworld
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;sudo 실행 시 비밀번호를 묻지 않게 하기 위해선 visudo를 열어 설정을 바꾸어줍니다.&lt;/p&gt;
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;## Same thing without a password&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# %wheel ALL=(ALL) NOPASSWD: ALL&lt;/span&gt;
위 부분의 주석을 해제해준다
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;step-2---일반사용자-su-막기&quot;&gt;STEP 2 - 일반사용자 su 막기&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;root권한은 어느 상황이던 중요하다. root로 실행되는 명령어는 추적이 되지 않고, 최고관리자이기 때문에 보안이슈가 발생한다. 따라서 root 계정 로그인을 막는다! 오직 root로 선 로그인을 해야만 하게!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;root 계정으로 로그인을 한 후 아래 입력!&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;4750 /bin/su
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;위와같이 설정하면 sudoer이라도 로그인을 못하는것을 볼 수 있다&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/37994634/104313802-eaff2600-551b-11eb-9063-f78a60e7c169.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Wonryang Heo</name></author><category term="linux" /><category term="CentOS7" /><summary type="html">wheel과 sudoer</summary></entry><entry><title type="html">docker 시작 시 참고 사이트</title><link href="https://closetotheworld.github.io/docker/docker-sites/" rel="alternate" type="text/html" title="docker 시작 시 참고 사이트" /><published>2021-01-12T00:00:00+09:00</published><updated>2021-01-13T07:25:00+09:00</updated><id>https://closetotheworld.github.io/docker/docker-sites</id><content type="html" xml:base="https://closetotheworld.github.io/docker/docker-sites/">&lt;h3 id=&quot;시작할-때-보면-좋은-사이트&quot;&gt;시작할 때 보면 좋은 사이트&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.44bits.io/ko/post/easy-deploy-with-docker&quot;&gt;1번 사이트&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.44bits.io/ko/post/almost-perfect-development-environment-with-docker-and-docker-compose&quot;&gt;2번 사이트&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://subicura.com/2016/06/07/zero-downtime-docker-deployment.html&quot;&gt;3번 사이트(subicura님)(도커 무중단 배포하기)&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://subicura.com/2019/05/19/kubernetes-basic-1.html&quot;&gt;4번 사이트(subicura님)(쿠버네티스 시작하기)&lt;/a&gt;&lt;/p&gt;</content><author><name>Wonryang Heo</name></author><category term="Docker" /><category term="container" /><category term="MSA" /><summary type="html">시작할 때 보면 좋은 사이트</summary></entry><entry><title type="html">VCNC 코딩테스트 후기</title><link href="https://closetotheworld.github.io/reviews/vcnc-coding-test-review/" rel="alternate" type="text/html" title="VCNC 코딩테스트 후기" /><published>2021-01-11T00:00:00+09:00</published><updated>2021-01-12T06:40:00+09:00</updated><id>https://closetotheworld.github.io/reviews/vcnc-coding-test-review</id><content type="html" xml:base="https://closetotheworld.github.io/reviews/vcnc-coding-test-review/">&lt;h3 id=&quot;vcnc&quot;&gt;VCNC?&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;타다, 비트윈을 만든 회사!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;타다는 몰라도 비트윈을 여자친구와 사용하고 있어서 공고에서는 vcnc? 라고 궁금했지만 비트윈을 만든 회사라니! 마침 블라인드 채용을 진행하고 있기에 코딩테스트를 신청했다!&lt;/p&gt;

&lt;p&gt;처음 신청 시에 어느 회사에 지원할 건지 뜨는데, 비트윈 사용자이기에 비트윈 서버개발자로 신청을 했고, 쏘카에 복수지원 할 것인지도 물어보아서 쏘카 이용자이기도 하기에 체크를 했다!&lt;/p&gt;

&lt;h3 id=&quot;코딩테스트&quot;&gt;코딩테스트!&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;2020-01-10(일)에 코테를 보았고 16시~19시 총 3시간을 진행했다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;한 문제는 트리 DP문제가 나왔고 백준 골드정도 되는 난이도였던 것 같다. 나머지 두 문제는 쉬웠다. 거의 구현문제 느낌&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2솔을 기본으로 가져야 합격하지 않을 까 하는 생각이다!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;결과2021-01-12&quot;&gt;결과(2021-01-12)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;u&gt;떨어졌다&lt;/u&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;어려운 편이었지만 3제출이여서 붙을 줄 알았는데, 아마 Tree DP 문제에서 실수가 있었을 것 같다!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;비슷한 문제인 BOJ 1949 &lt;a href=&quot;https://www.acmicpc.net/problem/1949&quot;&gt;우수마을&lt;/a&gt; 을 풀어봐야겠다&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Wonryang Heo</name></author><category term="Reviews" /><category term="codingtest" /><category term="lookingforajob" /><summary type="html">VCNC?</summary></entry><entry><title type="html">Programmers level-3 (2xn 타일)</title><link href="https://closetotheworld.github.io/programmers/programmers-2xn/" rel="alternate" type="text/html" title="Programmers level-3 (2xn 타일)" /><published>2021-01-10T00:00:00+09:00</published><updated>2021-01-11T07:00:00+09:00</updated><id>https://closetotheworld.github.io/programmers/programmers-2xn</id><content type="html" xml:base="https://closetotheworld.github.io/programmers/programmers-2xn/">&lt;h3 id=&quot;2xn-타일-문제&quot;&gt;2xn 타일 문제&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;가로 길이가 2이고 세로의 길이가 1인 직사각형모양의 타일이 있습니다. 이 직사각형 타일을 이용하여 세로의 길이가 2이고 가로의 길이가 n인 바닥을 가득 채우려고 합니다. 타일을 채울 때는 다음과 같이 2가지 방법이 있습니다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;타일을 가로로 배치 하는 경우&lt;/li&gt;
      &lt;li&gt;타일을 세로로 배치 하는 경우&lt;/li&gt;
      &lt;li&gt;예를들어서 n이 7인 직사각형은 다음과 같이 채울 수 있습니다.&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/37994634/104123669-f0c80080-538f-11eb-877c-c24f377e3480.png&quot; alt=&quot;image&quot; /&gt;
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;직사각형의 가로의 길이 n이 매개변수로 주어질 때, 이 직사각형을 채우는 방법의 수를 return 하는 solution 함수를 완성해주세요.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;제한사항&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;가로의 길이 n은 60,000이하의 자연수 입니다.&lt;/li&gt;
      &lt;li&gt;경우의 수가 많아 질 수 있으므로, 경우의 수를 1,000,000,007으로 나눈 나머지를 return해주세요.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;코드&quot;&gt;코드&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;풀이&lt;/code&gt; : n에 따라 늘어나는 직사각형의 경우의 수를 알아보게 되면 fibonacci 수열로 늘어나게 된다. 따라서 피보나치 수를 구하면 되는 문제이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;prev1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prev2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prev2&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;prev2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prev1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prev2&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;prev1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prev2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000000007&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Wonryang Heo</name></author><category term="Programmers" /><category term="algorithm" /><category term="fibonacci" /><summary type="html">2xn 타일 문제</summary></entry><entry><title type="html">VScode extension - material theme (vscode custom)</title><link href="https://closetotheworld.github.io/etc/vscode-custom/" rel="alternate" type="text/html" title="VScode extension - material theme (vscode custom)" /><published>2021-01-09T00:00:00+09:00</published><updated>2021-01-10T06:40:00+09:00</updated><id>https://closetotheworld.github.io/etc/vscode-custom</id><content type="html" xml:base="https://closetotheworld.github.io/etc/vscode-custom/">&lt;h3 id=&quot;vs-code&quot;&gt;VS code!&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;내가 가장 좋아하는 에디터이다.&lt;/li&gt;
  &lt;li&gt;일반 테마보다 예쁜 테마와 아이콘을 사용해보고자 커스텀 하는 법을 검색한 내용을 정리한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;material-theme&quot;&gt;material theme&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;vscode extension을 click ! 이후 material theme을 검색하면 이와 같은 테마가 나온다.
&lt;img src=&quot;https://user-images.githubusercontent.com/37994634/104091848-7467eb80-52c3-11eb-80d3-eefeece3db4a.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;extension을 설치한 후 f1을 입력하여 material theme을 적용하면 끝! 본인은 기본테마를 사용한다 . . !&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;material-icon-theme&quot;&gt;material Icon theme&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;material theme에 맞게 아이콘들도 material design으로 바꾸어 준다 ! 벌써 갓-개발자가 된 느낌이다.&lt;/li&gt;
  &lt;li&gt;extension에 Material Icon Theme을 검색하면 나온다 !
&lt;img src=&quot;https://user-images.githubusercontent.com/37994634/104091888-b133e280-52c3-11eb-8b09-b87112eaf2b9.png&quot; alt=&quot;image&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Wonryang Heo</name></author><category term="etc" /><category term="vscode" /><category term="custom" /><category term="tutorial" /><summary type="html">VS code! 내가 가장 좋아하는 에디터이다. 일반 테마보다 예쁜 테마와 아이콘을 사용해보고자 커스텀 하는 법을 검색한 내용을 정리한다. material theme vscode extension을 click ! 이후 material theme을 검색하면 이와 같은 테마가 나온다. extension을 설치한 후 f1을 입력하여 material theme을 적용하면 끝! 본인은 기본테마를 사용한다 . . ! material Icon theme material theme에 맞게 아이콘들도 material design으로 바꾸어 준다 ! 벌써 갓-개발자가 된 느낌이다. extension에 Material Icon Theme을 검색하면 나온다 !</summary></entry><entry><title type="html">WSL2 terminal custom</title><link href="https://closetotheworld.github.io/etc/wsl2-custom/" rel="alternate" type="text/html" title="WSL2 terminal custom" /><published>2021-01-09T00:00:00+09:00</published><updated>2021-01-10T07:20:00+09:00</updated><id>https://closetotheworld.github.io/etc/wsl2-custom</id><content type="html" xml:base="https://closetotheworld.github.io/etc/wsl2-custom/">&lt;h3 id=&quot;wsl2&quot;&gt;WSL2?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Windows Subsystem Linux&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;윈도우 시스템을 &lt;u&gt;Linux로도&lt;/u&gt; 이용할 수 있는 것!&lt;/li&gt;
  &lt;li&gt;WSL1보다 2가 조금 더 성능이 좋다고 한다.&lt;/li&gt;
  &lt;li&gt;리눅스의 terminal을 좋아하는 나로서는 너무 환영!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;terminal을-바꿔보자&quot;&gt;terminal을 바꿔보자&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;MAC에서도 사용하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oh my zsh&lt;/code&gt;를 설치할 것이다.&lt;/li&gt;
  &lt;li&gt;조금 더 예쁜 터미널 .. 완성이 되면 개발이 더 하고싶어질 거에요!&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;우선 먼저 zsh를 다운받아야 합니다..! &lt;a href=&quot;https://github.com/ohmyzsh/wiki/Installing-ZSH&quot;&gt;zsh 다운로드&lt;/a&gt; « 클릭!&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;zsh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;위 명령을 bash에 입력!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이후에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oh my zsh&lt;/code&gt;를 설치하기 위해 아래 명령어를 wsl2 terminal에 입력합니다!&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-fsSL&lt;/span&gt; https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;위 커맨드로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oh my zsh&lt;/code&gt;를 설치하는 와중에 아래 이미지처럼 default shell을 물어봅니다!
&lt;img src=&quot;https://user-images.githubusercontent.com/37994634/104092880-2e625600-52ca-11eb-9c34-5ce7375e2619.png&quot; alt=&quot;image&quot; /&gt;
    &lt;blockquote&gt;
      &lt;p&gt;당연히 YES 겠죠!&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;그렇다면 다음과 같은 화면이 나타나며 default shell이 zsh로 바뀌게 됩니다!
&lt;img src=&quot;https://user-images.githubusercontent.com/37994634/104092945-9add5500-52ca-11eb-8339-4048e16dae8f.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;하지만 뭔가 심심하다.. 더 시도해보자!&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;powerlevel10k&quot;&gt;Powerlevel10K&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Powerlevel10K&lt;/code&gt; 에서는 본인의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oh my zsh&lt;/code&gt;를 쉽게 커스텀 해 준다!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;우선 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;powerlevel10k&lt;/code&gt;의 github 주소로 들어가서 따라 해보자!&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/romkatv/powerlevel10k#oh-my-zsh&quot;&gt;powerlevel10k 클릭&lt;/a&gt;&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;내리다보면 이 부분이 보인다! oh my zsh 밑에있는 git 명령어를 복사해주자.&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/37994634/104301064-8edfd600-550a-11eb-868b-821fb5fb5620.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;이후로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.zshrc&lt;/code&gt; 을 편집기로 열어 ZSH_THEME=”robbyrussell” 부분의 robbyrussell을 위 이미지처럼 powerlevel10k/powerlevel10k 로 바꾸어준다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;그 다음 github 주소에서 밑으로 내리다보면 다음과 같은 폰트파일이 보인다&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/37994634/104301390-eda54f80-550a-11eb-95e1-376fa09eabf8.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
        &lt;ul&gt;
          &lt;li&gt;전부 다운받아 준 뒤 wsl2를 재시작해보자!&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;위 과정을 따라했다면, 마법사가 시작되는데, 터미널에서는 아무리봐도 네모 두 개인 글자를 보고 다이아몬드로 보이냐고 물어본다. 이는 폰트가 적용되지 않았기 때문이다. 자! 폰트설정을 해보자!&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/37994634/104301601-32c98180-550b-11eb-8b7b-5f4e7ebcda6b.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;위 이미지에서 설정을 눌러주면 vscode든 visual studio든 편집기로 settings.json이 열릴 것이다!&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/37994634/104301910-86d46600-550b-11eb-8f66-e23619e24b7a.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;쭉 내려와서 본인의 wsl2 profile 부분에 FONT설정을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MesloLGS NF&lt;/code&gt; 로 입력해주자!&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;이후에는 다이아몬드던 데비안로고던 물어보는 로고가 다 잘 표시가 될 것이다! 설정은 본인의 입맛대로 구성하면 된다 :)&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;나의 Termianl&lt;br /&gt;
 &lt;img src=&quot;https://user-images.githubusercontent.com/37994634/104302124-c307c680-550b-11eb-8c88-a523f77028ae.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Wonryang Heo</name></author><category term="etc" /><category term="wsl2" /><category term="terminal" /><category term="custom" /><category term="tutorial" /><summary type="html">WSL2? Windows Subsystem Linux 윈도우 시스템을 Linux로도 이용할 수 있는 것! WSL1보다 2가 조금 더 성능이 좋다고 한다. 리눅스의 terminal을 좋아하는 나로서는 너무 환영! terminal을 바꿔보자 MAC에서도 사용하는 oh my zsh를 설치할 것이다. 조금 더 예쁜 터미널 .. 완성이 되면 개발이 더 하고싶어질 거에요! 우선 먼저 zsh를 다운받아야 합니다..! zsh 다운로드 « 클릭! sudo apt install zsh 위 명령을 bash에 입력! 이후에는 oh my zsh를 설치하기 위해 아래 명령어를 wsl2 terminal에 입력합니다! sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot; 위 커맨드로 oh my zsh를 설치하는 와중에 아래 이미지처럼 default shell을 물어봅니다! 당연히 YES 겠죠! 그렇다면 다음과 같은 화면이 나타나며 default shell이 zsh로 바뀌게 됩니다! 하지만 뭔가 심심하다.. 더 시도해보자! Powerlevel10K Powerlevel10K 에서는 본인의 oh my zsh를 쉽게 커스텀 해 준다! 우선 powerlevel10k의 github 주소로 들어가서 따라 해보자! powerlevel10k 클릭 내리다보면 이 부분이 보인다! oh my zsh 밑에있는 git 명령어를 복사해주자. 이후로 ~/.zshrc 을 편집기로 열어 ZSH_THEME=”robbyrussell” 부분의 robbyrussell을 위 이미지처럼 powerlevel10k/powerlevel10k 로 바꾸어준다. 그 다음 github 주소에서 밑으로 내리다보면 다음과 같은 폰트파일이 보인다 전부 다운받아 준 뒤 wsl2를 재시작해보자! 위 과정을 따라했다면, 마법사가 시작되는데, 터미널에서는 아무리봐도 네모 두 개인 글자를 보고 다이아몬드로 보이냐고 물어본다. 이는 폰트가 적용되지 않았기 때문이다. 자! 폰트설정을 해보자! 위 이미지에서 설정을 눌러주면 vscode든 visual studio든 편집기로 settings.json이 열릴 것이다! 쭉 내려와서 본인의 wsl2 profile 부분에 FONT설정을 MesloLGS NF 로 입력해주자! 이후에는 다이아몬드던 데비안로고던 물어보는 로고가 다 잘 표시가 될 것이다! 설정은 본인의 입맛대로 구성하면 된다 :) 나의 Termianl</summary></entry><entry><title type="html">2021-01-09</title><link href="https://closetotheworld.github.io/daily/210109-diary/" rel="alternate" type="text/html" title="2021-01-09" /><published>2021-01-09T00:00:00+09:00</published><updated>2021-01-10T08:00:00+09:00</updated><id>https://closetotheworld.github.io/daily/210109-diary</id><content type="html" xml:base="https://closetotheworld.github.io/daily/210109-diary/">&lt;h3 id=&quot;다시-구미로-왔다&quot;&gt;다시 구미로 왔다!&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;디지털관의 냄새가 역시 제일 편하다&lt;/li&gt;
  &lt;li&gt;터미널에서 내려서 바로 연구실로 왔다!&lt;/li&gt;
  &lt;li&gt;바로 집으로 가면 포스트를 안할 것 같아서..&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;퀄리티-있는-포스트-적기가-어렵다&quot;&gt;퀄리티 있는 포스트 적기가 어렵다&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;아는것 대로 다 적으면 요점이 안 사는 것 같고,,&lt;/li&gt;
  &lt;li&gt;처음이라 그렇겠지? 많은 포스트를 하게되면 조금 더 괜찮아 질 것 같다&lt;/li&gt;
  &lt;li&gt;커스텀 포스트를 너무 대충 적은 것 같다. 내일 더 수정해야지&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;이달의-목표&quot;&gt;이달의 목표&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;이달 말 자취방을 빼고 본가로 내려간다. 그러면 이제 졸업생으로서 도서관을 못쓴다&lt;/li&gt;
  &lt;li&gt;빌렸던 책을 빨리 정리하고 포스트화 해놔야겠다!
    &lt;ul&gt;
      &lt;li&gt;Go Cookbook&lt;/li&gt;
      &lt;li&gt;Go in Action&lt;/li&gt;
      &lt;li&gt;스프링 입문을 위한 자바 객체지향의 원리와 이해&lt;/li&gt;
      &lt;li&gt;도커 시작&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;오늘도-고생했따-&quot;&gt;오늘도 고생했따 !&lt;/h3&gt;</content><author><name>Wonryang Heo</name></author><category term="daily" /><category term="diary" /><summary type="html">다시 구미로 왔다!</summary></entry><entry><title type="html">2021-01-08</title><link href="https://closetotheworld.github.io/daily/210108-diary/" rel="alternate" type="text/html" title="2021-01-08" /><published>2021-01-08T00:00:00+09:00</published><updated>2021-01-09T07:00:00+09:00</updated><id>https://closetotheworld.github.io/daily/210108-diary</id><content type="html" xml:base="https://closetotheworld.github.io/daily/210108-diary/">&lt;h2 id=&quot;오늘-먹은-것&quot;&gt;오늘 먹은 것&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/37994634/104018964-09081600-51fe-11eb-9132-a2ed1c15cc4c.png&quot; alt=&quot;image&quot; width=&quot;200&quot; height=&quot;200&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;뒷고기는 항상 옳으시다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;내일은-다시-구미로&quot;&gt;내일은 다시 구미로&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;다시 가서 열심히 포스트하고 열심히 공부하고&lt;/li&gt;
  &lt;li&gt;얼마 남지않은 연구실에서의 공부 야무지게 끝내자잇&lt;/li&gt;
  &lt;li&gt;오늘도 고생했따!&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Wonryang Heo</name></author><category term="daily" /><category term="diary" /><summary type="html">오늘 먹은 것</summary></entry></feed>